config DESIRED_TARGET_ARCH string {
 env ARCH if []
}
choice boolean {
 prompt "Target Architecture" if []
 default [TARGET_alpha] if [DESIRED_TARGET_ARCH="alpha"]
 default [TARGET_arm] if [DESIRED_TARGET_ARCH="arm"]
 default [TARGET_avr32] if [DESIRED_TARGET_ARCH="avr32"]
 default [TARGET_bfin] if [DESIRED_TARGET_ARCH="bfin"]
 default [TARGET_cris] if [DESIRED_TARGET_ARCH="cris"]
 default [TARGET_e1] if [DESIRED_TARGET_ARCH="e1"]
 default [TARGET_frv] if [DESIRED_TARGET_ARCH="frv"]
 default [TARGET_h8300] if [DESIRED_TARGET_ARCH="h8300"]
 default [TARGET_hppa] if [DESIRED_TARGET_ARCH="hppa"]
 default [TARGET_i386] if [DESIRED_TARGET_ARCH="i386"]
 default [TARGET_i960] if [DESIRED_TARGET_ARCH="i960"]
 default [TARGET_ia64] if [DESIRED_TARGET_ARCH="ia64"]
 default [TARGET_m68k] if [DESIRED_TARGET_ARCH="m68k"]
 default [TARGET_microblaze] if [DESIRED_TARGET_ARCH="microblaze"]
 default [TARGET_mips] if [DESIRED_TARGET_ARCH="mips"]
 default [TARGET_nios] if [DESIRED_TARGET_ARCH="nios"]
 default [TARGET_nios2] if [DESIRED_TARGET_ARCH="nios2"]
 default [TARGET_powerpc] if [DESIRED_TARGET_ARCH="powerpc"]
 default [TARGET_sh] if [DESIRED_TARGET_ARCH="sh"]
 default [TARGET_sh64] if [DESIRED_TARGET_ARCH="sh64"]
 default [TARGET_sparc] if [DESIRED_TARGET_ARCH="sparc"]
 default [TARGET_v850] if [DESIRED_TARGET_ARCH="v850"]
 default [TARGET_vax] if [DESIRED_TARGET_ARCH="vax"]
 default [TARGET_x86_64] if [DESIRED_TARGET_ARCH="x86_64"]
 default [TARGET_xtensa] if [DESIRED_TARGET_ARCH="xtensa"]
 config TARGET_alpha boolean {
  prompt "alpha" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_arm boolean {
  prompt "arm" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_avr32 boolean {
  prompt "avr32" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_bfin boolean {
  prompt "bfin" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_c6x boolean {
  prompt "c6x" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_cris boolean {
  prompt "cris" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_e1 boolean {
  prompt "e1 (BROKEN)" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_frv boolean {
  prompt "frv (BROKEN)" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_h8300 boolean {
  prompt "h8300 (BROKEN)" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_hppa boolean {
  prompt "hppa" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_i386 boolean {
  prompt "i386" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_i960 boolean {
  prompt "i960 (BROKEN)" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_ia64 boolean {
  prompt "ia64" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_m68k boolean {
  prompt "m68k" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_microblaze boolean {
  prompt "microblaze" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_mips boolean {
  prompt "mips" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_nios boolean {
  prompt "nios" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_nios2 boolean {
  prompt "nios2" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_powerpc boolean {
  prompt "powerpc" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_sh boolean {
  prompt "superh" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_sh64 boolean {
  prompt "sh64" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_sparc boolean {
  prompt "sparc" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_v850 boolean {
  prompt "v850 (BROKEN)" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_vax boolean {
  prompt "vax" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_x86_64 boolean {
  prompt "x86_64" if [<choice>]
  inherited [<choice>]
 }
 config TARGET_xtensa boolean {
  prompt "xtensa" if [<choice>]
  inherited [<choice>]
 }
}
menu "Target Architecture Features and Options" {
 if [TARGET_alpha] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_alpha]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_alpha]
  }
 }
 if [TARGET_arm] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_arm]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_arm]
  }
  config CONFIG_ARM_EABI boolean {
   prompt "Build for EABI" if [TARGET_arm]
   inherited [TARGET_arm]
  }
  config COMPILE_IN_THUMB_MODE boolean {
   prompt "Build using Thumb mode" if [TARGET_arm]
   select USE_BX if [TARGET_arm]
   inherited [TARGET_arm]
  }
  config USE_BX boolean {
   prompt "Use BX in function return" if [TARGET_arm]
   inherited [TARGET_arm]
  }
 }
 if [TARGET_avr32] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_avr32]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_avr32]
  }
  choice boolean {
   prompt "Target CPU Type" if [TARGET_avr32]
   default [CONFIG_AVR32_AP7] if [TARGET_avr32]
   config CONFIG_AVR32_AP7 boolean {
    prompt "AVR32 AP7" if [<choice>]
    select ARCH_HAS_MMU if [<choice>]
    inherited [<choice>]
   }
  }
  config LINKRELAX boolean {
   prompt "Enable linker optimizations" if [TARGET_avr32]
   default [y] if [TARGET_avr32]
   inherited [TARGET_avr32]
  }
 }
 if [TARGET_bfin] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_bfin]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_bfin]
  }
 }
 if [TARGET_cris] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_cris]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_cris]
  }
  choice boolean {
   prompt "Target Architecture Type" if [TARGET_cris]
   default [CONFIG_CRIS] if [TARGET_cris]
   config CONFIG_CRIS boolean {
    select ARCH_HAS_MMU if [<choice>]
    prompt "CRIS" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_CRISV32 boolean {
    select ARCH_HAS_MMU if [<choice>]
    prompt "CRISv32" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_e1] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_e1]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_e1]
  }
 }
 if [TARGET_frv] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_frv]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_frv]
  }
 }
 if [TARGET_h8300] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_h8300]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_h8300]
  }
  choice boolean {
   prompt "Target Processor" if [TARGET_h8300]
   default [CONFIG_H8300H] if [TARGET_h8300]
   config CONFIG_H8300H boolean {
    prompt "H8300H" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_H8S boolean {
    prompt "H8S (edosk2674)" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_hppa] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_hppa]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_hppa]
  }
 }
 if [TARGET_i386] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_i386]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_i386]
  }
  choice boolean {
   prompt "Target x86 Processor Family" if [TARGET_i386]
   default [CONFIG_486] if [TARGET_i386]
   config CONFIG_GENERIC_386 boolean {
    prompt "Generic 386" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_386 boolean {
    prompt "386" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_486 boolean {
    prompt "486" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_586 boolean {
    prompt "Pentium/586/K5/5x86/6x86/6x86MX" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_586MMX boolean {
    prompt "Pentium-MMX" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_686 boolean {
    prompt "Pentium-Pro" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_PENTIUMII boolean {
    prompt "Celeron/Pentium-II" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_PENTIUMIII boolean {
    prompt "Pentium-III/Celeron(Coppermine)/Pentium-III Xeon" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_PENTIUM4 boolean {
    prompt "Pentium-4/Celeron(P4-based)/Xeon" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_K6 boolean {
    prompt "K6/K6-II/K6-III" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_K7 boolean {
    prompt "Athlon/Duron/K7" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_ELAN boolean {
    prompt "Elan" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_CRUSOE boolean {
    prompt "Crusoe" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_WINCHIPC6 boolean {
    prompt "Winchip-C6" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_WINCHIP2 boolean {
    prompt "Winchip-2/Winchip-2A/Winchip-3" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_CYRIXIII boolean {
    prompt "CyrixIII/VIA-C3" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_NEHEMIAH boolean {
    prompt "VIA C3-2 (Nehemiah)" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_i960] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_i960]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_i960]
  }
 }
 if [TARGET_ia64] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_ia64]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_ia64]
  }
 }
 if [TARGET_m68k] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_m68k]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_m68k]
  }
 }
 if [TARGET_nios] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_nios]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_nios]
  }
 }
 if [TARGET_nios2] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_nios2]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_nios2]
  }
 }
 if [TARGET_microblaze] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_microblaze]
  }
 }
 if [TARGET_mips] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_mips]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_mips]
  }
  choice boolean {
   prompt "Target ABI" if [TARGET_mips]
   default [CONFIG_MIPS_O32_ABI] if [TARGET_mips]
   config CONFIG_MIPS_O32_ABI boolean {
    prompt "O32 ABI" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_N32_ABI boolean {
    prompt "N32 ABI" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_N64_ABI boolean {
    prompt "N64 ABI" if [<choice>]
    inherited [<choice>]
   }
  }
  choice boolean {
   prompt "Target Processor Architecture" if [TARGET_mips]
   default [CONFIG_MIPS_ISA_1] if [TARGET_mips && CONFIG_MIPS_O32_ABI]
   default [CONFIG_MIPS_ISA_3] if [TARGET_mips && CONFIG_MIPS_N32_ABI]
   default [CONFIG_MIPS_ISA_3] if [TARGET_mips && CONFIG_MIPS_N64_ABI]
   config CONFIG_MIPS_ISA_1 boolean {
    prompt "Generic (MIPS I)" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_2 boolean {
    prompt "MIPS II" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_3 boolean {
    prompt "MIPS III" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_4 boolean {
    prompt "MIPS IV" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_MIPS32 boolean {
    prompt "MIPS32" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_MIPS32R2 boolean {
    prompt "MIPS32r2" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_MIPS_ISA_MIPS64 boolean {
    prompt "MIPS64" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_powerpc] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_powerpc]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_powerpc]
  }
  choice boolean {
   prompt "Target Processor Type" if [TARGET_powerpc]
   default [CONFIG_CLASSIC] if [TARGET_powerpc]
   config CONFIG_CLASSIC boolean {
    prompt "CLASSIC" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_E500 boolean {
    prompt "E500" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_sh] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_sh]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_sh]
  }
  choice boolean {
   prompt "Target Processor Type" if [TARGET_sh]
   default [CONFIG_SH4] if [TARGET_sh]
   config CONFIG_SH2A boolean {
    select ARCH_HAS_NO_MMU if [<choice>]
    select HAVE_NO_PIC if [<choice>]
    prompt "SH2A" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SH2 boolean {
    select ARCH_HAS_NO_MMU if [<choice>]
    prompt "SH2" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SH3 boolean {
    select ARCH_HAS_MMU if [<choice>]
    prompt "SH3" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SH4 boolean {
    prompt "SH4" if [<choice>]
    inherited [<choice>]
   }
  }
  config ARCH_HAS_BWD_MEMCPY boolean {
   default [y] if [TARGET_sh && CONFIG_SH4]
   depends on [CONFIG_SH4]
   inherited [TARGET_sh && CONFIG_SH4]
  }
 }
 if [TARGET_sh64] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_sh64]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_sh64]
  }
  choice boolean {
   prompt "Target Processor Type" if [TARGET_sh64]
   default [CONFIG_SH5] if [TARGET_sh64]
   config CONFIG_SH5 boolean {
    select ARCH_HAS_MMU if [<choice>]
    select UCLIBC_HAS_LFS if [<choice>]
    prompt "SH5" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_sparc] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_sparc]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_sparc]
  }
  choice boolean {
   prompt "Target Processor Type" if [TARGET_sparc]
   default [CONFIG_SPARC_V8] if [TARGET_sparc]
   config CONFIG_SPARC_V7 boolean {
    prompt "SPARC v7" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SPARC_V8 boolean {
    prompt "SPARC v8" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SPARC_V9 boolean {
    prompt "SPARC v9" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_SPARC_V9B boolean {
    prompt "SPARC v9b" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [TARGET_v850] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_v850]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_v850]
  }
 }
 if [TARGET_vax] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_vax]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_vax]
  }
 }
 if [TARGET_x86_64] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_x86_64]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_x86_64]
  }
 }
 if [TARGET_xtensa] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_xtensa]
  }
 }
 if [TARGET_c6x] {
  config TARGET_ARCH string {
   default ["alpha"] if [TARGET_alpha]
   default ["arm"] if [TARGET_arm]
   default ["avr32"] if [TARGET_avr32]
   default ["bfin"] if [TARGET_bfin]
   default ["cris"] if [TARGET_cris]
   default ["e1"] if [TARGET_e1]
   default ["frv"] if [TARGET_frv]
   default ["h8300"] if [TARGET_h8300]
   default ["hppa"] if [TARGET_hppa]
   default ["i386"] if [TARGET_i386]
   default ["i960"] if [TARGET_i960]
   default ["ia64"] if [TARGET_ia64]
   default ["m68k"] if [TARGET_m68k]
   default ["nios"] if [TARGET_nios]
   default ["nios2"] if [TARGET_nios2]
   default ["microblaze"] if [TARGET_microblaze]
   default ["mips"] if [TARGET_mips]
   default ["powerpc"] if [TARGET_powerpc]
   default ["sh"] if [TARGET_sh]
   default ["sh64"] if [TARGET_sh64]
   default ["sparc"] if [TARGET_sparc]
   default ["v850"] if [TARGET_v850]
   default ["vax"] if [TARGET_vax]
   default ["x86_64"] if [TARGET_x86_64]
   default ["xtensa"] if [TARGET_xtensa]
   default ["c6x"] if [TARGET_c6x]
   inherited [TARGET_c6x]
  }
  config FORCE_OPTIONS_FOR_ARCH boolean {
   default [y] if [TARGET_alpha]
   select ARCH_LITTLE_ENDIAN if [TARGET_alpha]
   select ARCH_HAS_MMU if [TARGET_alpha]
   select ARCH_HAS_NO_LDSO if [TARGET_alpha]
   select UCLIBC_HAS_LFS if [TARGET_alpha]
   default [y] if [TARGET_arm]
   select ARCH_ANY_ENDIAN if [TARGET_arm]
   default [y] if [TARGET_avr32]
   select ARCH_BIG_ENDIAN if [TARGET_avr32]
   select FORCE_SHAREABLE_TEXT_SEGMENTS if [TARGET_avr32]
   default [y] if [TARGET_bfin]
   select ARCH_LITTLE_ENDIAN if [TARGET_bfin]
   select ARCH_HAS_NO_MMU if [TARGET_bfin]
   default [y] if [TARGET_cris]
   select ARCH_LITTLE_ENDIAN if [TARGET_cris]
   default [y] if [TARGET_e1]
   select ARCH_BIG_ENDIAN if [TARGET_e1]
   select ARCH_HAS_NO_MMU if [TARGET_e1]
   select ARCH_HAS_NO_SHARED if [TARGET_e1]
   default [y] if [TARGET_frv]
   select ARCH_BIG_ENDIAN if [TARGET_frv]
   select UCLIBC_HAS_FPU if [TARGET_frv]
   select ARCH_HAS_NO_MMU if [TARGET_frv]
   default [y] if [TARGET_h8300]
   select ARCH_ANY_ENDIAN if [TARGET_h8300]
   select ARCH_HAS_NO_MMU if [TARGET_h8300]
   default [y] if [TARGET_hppa]
   select ARCH_BIG_ENDIAN if [TARGET_hppa]
   select ARCH_HAS_MMU if [TARGET_hppa]
   select HAS_NO_THREADS if [TARGET_hppa]
   select ARCH_HAS_NO_LDSO if [TARGET_hppa]
   select HAVE_NO_SSP if [TARGET_hppa]
   default [y] if [TARGET_i386]
   select ARCH_LITTLE_ENDIAN if [TARGET_i386]
   select ARCH_HAS_MMU if [TARGET_i386]
   default [y] if [TARGET_i960]
   select ARCH_LITTLE_ENDIAN if [TARGET_i960]
   select ARCH_HAS_NO_MMU if [TARGET_i960]
   select HAS_NO_THREADS if [TARGET_i960]
   default [y] if [TARGET_ia64]
   select ARCH_LITTLE_ENDIAN if [TARGET_ia64]
   select ARCH_HAS_MMU if [TARGET_ia64]
   select ARCH_HAS_NO_LDSO if [TARGET_ia64]
   default [y] if [TARGET_m68k]
   select ARCH_BIG_ENDIAN if [TARGET_m68k]
   default [y] if [TARGET_nios]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios]
   select ARCH_HAS_NO_MMU if [TARGET_nios]
   select ARCH_HAS_NO_LDSO if [TARGET_nios]
   select HAVE_NO_PIC if [TARGET_nios]
   default [y] if [TARGET_nios2]
   select ARCH_LITTLE_ENDIAN if [TARGET_nios2]
   select ARCH_HAS_NO_MMU if [TARGET_nios2]
   select ARCH_HAS_NO_LDSO if [TARGET_nios2]
   select HAVE_NO_PIC if [TARGET_nios2]
   default [y] if [TARGET_mips]
   select ARCH_ANY_ENDIAN if [TARGET_mips]
   default [y] if [TARGET_powerpc]
   select ARCH_BIG_ENDIAN if [TARGET_powerpc]
   select ARCH_HAS_MMU if [TARGET_powerpc]
   default [y] if [TARGET_sh]
   select ARCH_ANY_ENDIAN if [TARGET_sh]
   default [y] if [TARGET_sh64]
   select ARCH_ANY_ENDIAN if [TARGET_sh64]
   default [y] if [TARGET_sparc]
   select ARCH_BIG_ENDIAN if [TARGET_sparc]
   default [y] if [TARGET_v850]
   select ARCH_LITTLE_ENDIAN if [TARGET_v850]
   select ARCH_HAS_NO_MMU if [TARGET_v850]
   select HAVE_NO_PIC if [TARGET_v850]
   default [y] if [TARGET_vax]
   select ARCH_LITTLE_ENDIAN if [TARGET_vax]
   select ARCH_HAS_NO_LDSO if [TARGET_vax]
   default [y] if [TARGET_x86_64]
   select ARCH_LITTLE_ENDIAN if [TARGET_x86_64]
   select ARCH_HAS_MMU if [TARGET_x86_64]
   default [y] if [TARGET_c6x]
   select ARCH_ANY_ENDIAN if [TARGET_c6x]
   select ARCH_HAS_NO_MMU if [TARGET_c6x]
   inherited [TARGET_c6x]
  }
  choice boolean {
   prompt "Target Processor Type" if [TARGET_c6x]
   default [CONFIG_GENERIC_C6X] if [TARGET_c6x]
   config CONFIG_GENERIC_C6X boolean {
    prompt "Generic C6X DSP" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_TMS320C64X boolean {
    prompt "TMS320C64X" if [<choice>]
    inherited [<choice>]
   }
   config CONFIG_TMS320C64XPLUS boolean {
    prompt "TMS320C64X+" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 config TARGET_SUBARCH string {
  default ["e500"] if [CONFIG_E500]
  default ["classic"] if [CONFIG_CLASSIC]
  default ["sh4"] if [CONFIG_SH4]
  default [""] if [CONFIG_GENERIC_386 || CONFIG_386]
  default ["i486"] if [CONFIG_486]
  default ["i586"] if [CONFIG_586 || CONFIG_586MMX]
  default ["i686"] if [TARGET_ARCH="i386"]
  default [""] if []
 }
 if [!ARCH_USE_MMU] {
  choice boolean {
   prompt "Target File Format" if [!ARCH_USE_MMU]
   config UCLIBC_FORMAT_ELF boolean {
    prompt "ELF" if [<choice> && ARCH_USE_MMU]
    depends on [ARCH_USE_MMU]
    inherited [<choice> && ARCH_USE_MMU]
   }
   config UCLIBC_FORMAT_FDPIC_ELF boolean {
    prompt "FDPIC ELF" if [<choice> && !ARCH_USE_MMU && (TARGET_bfin || TARGET_frv)]
    depends on [!ARCH_USE_MMU && (TARGET_bfin || TARGET_frv)]
    select DOPIC if [<choice> && !ARCH_USE_MMU && (TARGET_bfin || TARGET_frv)]
    inherited [<choice> && !ARCH_USE_MMU && (TARGET_bfin || TARGET_frv)]
   }
   config UCLIBC_FORMAT_DSBT_ELF boolean {
    prompt "DBST ELF" if [<choice> && !ARCH_USE_MMU && TARGET_c6x]
    depends on [!ARCH_USE_MMU && TARGET_c6x]
    select DOPIC if [<choice> && !ARCH_USE_MMU && TARGET_c6x]
    inherited [<choice> && !ARCH_USE_MMU && TARGET_c6x]
   }
   config UCLIBC_FORMAT_FLAT boolean {
    prompt "STATIC FLAT" if [<choice> && !ARCH_USE_MMU]
    depends on [!ARCH_USE_MMU]
    select ARCH_HAS_NO_LDSO if [<choice> && !ARCH_USE_MMU]
    inherited [<choice> && !ARCH_USE_MMU]
   }
   config UCLIBC_FORMAT_FLAT_SEP_DATA boolean {
    prompt "STATIC FLAT (sep-data)" if [<choice> && !ARCH_USE_MMU]
    depends on [!ARCH_USE_MMU]
    select ARCH_HAS_NO_LDSO if [<choice> && !ARCH_USE_MMU]
    inherited [<choice> && !ARCH_USE_MMU]
   }
   config UCLIBC_FORMAT_SHARED_FLAT boolean {
    prompt "SHARED FLAT" if [<choice> && !ARCH_USE_MMU]
    depends on [!ARCH_USE_MMU]
    select ARCH_HAS_NO_LDSO if [<choice> && !ARCH_USE_MMU]
    inherited [<choice> && !ARCH_USE_MMU]
   }
  }
 }
 if [ARCH_USE_MMU] {
 }
 config UCLIBC_SHARED_FLAT_ID integer {
  prompt "Shared library ID" if [UCLIBC_FORMAT_SHARED_FLAT]
  default [1] if [UCLIBC_FORMAT_SHARED_FLAT]
  depends on [UCLIBC_FORMAT_SHARED_FLAT]
  inherited [UCLIBC_FORMAT_SHARED_FLAT]
 }
 config ARCH_ANY_ENDIAN boolean {
 }
 config ARCH_BIG_ENDIAN boolean {
 }
 config ARCH_LITTLE_ENDIAN boolean {
 }
 if [ARCH_ANY_ENDIAN] {
  choice boolean {
   prompt "Target Processor Endianness" if [ARCH_ANY_ENDIAN]
   config ARCH_WANTS_BIG_ENDIAN boolean {
    prompt "Big Endian" if [<choice>]
    select ARCH_BIG_ENDIAN if [<choice>]
    inherited [<choice>]
   }
   config ARCH_WANTS_LITTLE_ENDIAN boolean {
    prompt "Little Endian" if [<choice>]
    select ARCH_LITTLE_ENDIAN if [<choice>]
    inherited [<choice>]
   }
  }
 }
 if [!ARCH_ANY_ENDIAN && ARCH_LITTLE_ENDIAN] {
 }
 if [!ARCH_ANY_ENDIAN && ARCH_BIG_ENDIAN] {
 }
 config ARCH_HAS_NO_MMU boolean {
 }
 if [ARCH_HAS_NO_MMU] {
 }
 config ARCH_HAS_MMU boolean {
  prompt "Target CPU has a memory management unit (MMU)" if [!ARCH_HAS_NO_MMU]
  depends on [!ARCH_HAS_NO_MMU]
  default [y] if [!ARCH_HAS_NO_MMU]
  inherited [!ARCH_HAS_NO_MMU]
  config ARCH_USE_MMU boolean {
   prompt "Do you want to utilize the MMU?" if [ARCH_HAS_MMU]
   depends on [ARCH_HAS_MMU]
   default [y] if [ARCH_HAS_MMU]
   inherited [ARCH_HAS_MMU]
  }
 }
 config UCLIBC_HAS_FLOATS boolean {
  prompt "Enable floating point number support" if []
  default [y] if []
 }
 config UCLIBC_HAS_FPU boolean {
  prompt "Target CPU has a floating point unit (FPU)" if []
  default [y] if []
  config UCLIBC_HAS_SOFT_FLOAT boolean {
   depends on [UCLIBC_HAS_FLOATS && !UCLIBC_HAS_FPU]
   default [y] if [UCLIBC_HAS_FLOATS && !UCLIBC_HAS_FPU]
   inherited [UCLIBC_HAS_FLOATS && !UCLIBC_HAS_FPU]
  }
 }
 config DO_C99_MATH boolean {
  prompt "Enable full C99 math library support" if [UCLIBC_HAS_FLOATS]
  depends on [UCLIBC_HAS_FLOATS]
  default [n] if [UCLIBC_HAS_FLOATS]
  inherited [UCLIBC_HAS_FLOATS]
 }
 config DO_XSI_MATH boolean {
  prompt "Enable XSI math extensions to the ISO C standard (bessel)" if [UCLIBC_HAS_FLOATS]
  depends on [UCLIBC_HAS_FLOATS]
  default [n] if [UCLIBC_HAS_FLOATS]
  inherited [UCLIBC_HAS_FLOATS]
 }
 config UCLIBC_HAS_FENV boolean {
  prompt "Enable C99 Floating-point environment" if [UCLIBC_HAS_FLOATS]
  depends on [UCLIBC_HAS_FLOATS]
  default [n] if [UCLIBC_HAS_FLOATS]
  inherited [UCLIBC_HAS_FLOATS]
 }
 config UCLIBC_HAS_LONG_DOUBLE_MATH boolean {
  prompt "Enable long double support" if [DO_C99_MATH && (TARGET_i386 || TARGET_m68k || TARGET_sparc || TARGET_x86_64 || TARGET_powerpc || TARGET_sh || TARGET_microblaze)]
  depends on [DO_C99_MATH]
  depends on [TARGET_i386 || TARGET_m68k || TARGET_sparc || TARGET_x86_64 || TARGET_powerpc || TARGET_sh || TARGET_microblaze]
  default [y] if [DO_C99_MATH && (TARGET_i386 || TARGET_m68k || TARGET_sparc || TARGET_x86_64 || TARGET_powerpc || TARGET_sh || TARGET_microblaze)]
  inherited [DO_C99_MATH && (TARGET_i386 || TARGET_m68k || TARGET_sparc || TARGET_x86_64 || TARGET_powerpc || TARGET_sh || TARGET_microblaze)]
 }
 config KERNEL_HEADERS string {
  prompt "Linux kernel header location" if []
  default ["/usr/include"] if []
 }
 config UCLIBC_UCLINUX_BROKEN_MUNMAP boolean {
  depends on [!ARCH_USE_MMU]
  default [y] if [!ARCH_USE_MMU]
  inherited [!ARCH_USE_MMU]
 }
 config HAVE_DOT_CONFIG boolean {
  default [y] if []
 }
}
menu "General Library Settings" {
 config HAVE_NO_PIC boolean {
 }
 config DOPIC boolean {
  prompt "Generate only Position Independent Code (PIC)" if [!HAVE_NO_PIC]
  default [y] if [!HAVE_NO_PIC]
  depends on [!HAVE_NO_PIC]
  inherited [!HAVE_NO_PIC]
 }
 config ARCH_HAS_NO_SHARED boolean {
 }
 config ARCH_HAS_NO_LDSO boolean {
  select ARCH_HAS_NO_SHARED if []
 }
 config HAVE_SHARED boolean {
  prompt "Enable shared libraries" if [!ARCH_HAS_NO_SHARED]
  depends on [!ARCH_HAS_NO_SHARED]
  default [y] if [!ARCH_HAS_NO_SHARED]
  inherited [!ARCH_HAS_NO_SHARED]
  config FORCE_SHAREABLE_TEXT_SEGMENTS boolean {
   prompt "Only load shared libraries which can share their text segment" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   select DOPIC if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_LDD_SUPPORT boolean {
   prompt "Native 'ldd' support" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_CACHE_SUPPORT boolean {
   prompt "Enable library loader cache (ld.so.conf)" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_PRELOAD_ENV_SUPPORT boolean {
   prompt "Enable library loader LD_PRELOAD environment" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_PRELOAD_FILE_SUPPORT boolean {
   prompt "Enable library loader preload file (ld.so.preload)" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   inherited [HAVE_SHARED]
   config LDSO_BASE_FILENAME string {
    prompt "Shared library loader naming prefix" if [HAVE_SHARED && (LDSO_CACHE_SUPPORT || LDSO_PRELOAD_FILE_SUPPORT)]
    depends on [HAVE_SHARED && (LDSO_CACHE_SUPPORT || LDSO_PRELOAD_FILE_SUPPORT)]
    default ["ld.so"] if [HAVE_SHARED && (LDSO_CACHE_SUPPORT || LDSO_PRELOAD_FILE_SUPPORT)]
    inherited [HAVE_SHARED && (LDSO_CACHE_SUPPORT || LDSO_PRELOAD_FILE_SUPPORT)]
   }
  }
  config LDSO_STANDALONE_SUPPORT boolean {
   prompt "Dynamic linker stand-alone mode support" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_PRELINK_SUPPORT boolean {
   prompt "Dynamic linker prelink support" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   select LDSO_STANDALONE_SUPPORT if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config UCLIBC_STATIC_LDCONFIG boolean {
   prompt "Link ldconfig statically" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_RUNPATH boolean {
   prompt "Enable ELF RUNPATH tag support" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED && LDSO_CACHE_SUPPORT]
   inherited [HAVE_SHARED]
  }
  config LDSO_SEARCH_INTERP_PATH boolean {
   prompt "Add ldso path to lib search path" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_LD_LIBRARY_PATH boolean {
   prompt "Add LD_LIBRARY_PATH to lib search path" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [y] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
  config LDSO_NO_CLEANUP boolean {
   prompt "Disable automatic unloading of dynamically loaded shared objects" if [HAVE_SHARED]
   depends on [HAVE_SHARED]
   default [n] if [HAVE_SHARED]
   inherited [HAVE_SHARED]
  }
 }
 config UCLIBC_CTOR_DTOR boolean {
  prompt "Support global constructors and destructors" if []
  default [y] if []
 }
 config LDSO_GNU_HASH_SUPPORT boolean {
  prompt "Enable GNU hash style support" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 choice boolean {
  prompt "Thread support" if []
  default [HAS_NO_THREADS] if []
  config HAS_NO_THREADS boolean {
   prompt "none" if [<choice>]
   inherited [<choice>]
  }
  config LINUXTHREADS_OLD boolean {
   prompt "older (stable) version of linuxthreads" if [<choice>]
   select UCLIBC_HAS_REALTIME if [<choice>]
   inherited [<choice>]
  }
  config LINUXTHREADS_NEW boolean {
   prompt "slightly newer version of linuxthreads" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_THREADS_NATIVE boolean {
   prompt "Native POSIX Threading (NPTL)" if [<choice> && !CONFIG_386]
   select UCLIBC_HAS_TLS if [<choice> && !CONFIG_386]
   select UCLIBC_HAS_STDIO_FUTEXES if [<choice> && !CONFIG_386]
   depends on [!CONFIG_386]
   inherited [<choice> && !CONFIG_386]
  }
 }
 config UCLIBC_HAS_THREADS boolean {
  default [y] if [!HAS_NO_THREADS]
 }
 config UCLIBC_HAS_TLS boolean {
  prompt "Thread-Local Storage" if [UCLIBC_HAS_THREADS_NATIVE]
  depends on [UCLIBC_HAS_THREADS_NATIVE]
  inherited [UCLIBC_HAS_THREADS_NATIVE]
 }
 config PTHREADS_DEBUG_SUPPORT boolean {
  prompt "Build pthreads debugging support" if [UCLIBC_HAS_THREADS]
  depends on [UCLIBC_HAS_THREADS]
  inherited [UCLIBC_HAS_THREADS]
 }
 config UCLIBC_HAS_SYSLOG boolean {
  prompt "Syslog support" if [UCLIBC_HAS_NETWORK_SUPPORT]
  default [y] if [UCLIBC_HAS_NETWORK_SUPPORT]
  depends on [UCLIBC_HAS_NETWORK_SUPPORT]
  select UCLIBC_HAS_SOCKET if [UCLIBC_HAS_NETWORK_SUPPORT]
  inherited [UCLIBC_HAS_NETWORK_SUPPORT]
 }
 config UCLIBC_HAS_LFS boolean {
  prompt "Large File Support" if []
  default [y] if []
 }
 choice boolean {
  prompt "Malloc Implementation" if []
  default [MALLOC] if [!ARCH_USE_MMU]
  default [MALLOC_STANDARD] if [ARCH_USE_MMU]
  config MALLOC boolean {
   prompt "malloc" if [<choice>]
   inherited [<choice>]
  }
  config MALLOC_SIMPLE boolean {
   prompt "malloc-simple" if [<choice>]
   inherited [<choice>]
  }
  config MALLOC_STANDARD boolean {
   prompt "malloc-standard" if [<choice> && ARCH_USE_MMU]
   depends on [ARCH_USE_MMU]
   inherited [<choice> && ARCH_USE_MMU]
  }
 }
 config MALLOC_GLIBC_COMPAT boolean {
  prompt "Malloc returns live pointer for malloc(0)" if []
 }
 config UCLIBC_DYNAMIC_ATEXIT boolean {
  prompt "Dynamic atexit() Support" if []
  default [y] if []
 }
 config COMPAT_ATEXIT boolean {
  prompt "Old (visible) atexit Support" if []
 }
 config UCLIBC_SUSV3_LEGACY boolean {
  prompt "Enable SuSv3 LEGACY functions" if []
 }
 config UCLIBC_SUSV3_LEGACY_MACROS boolean {
  prompt "Enable SuSv3 LEGACY macros" if []
 }
 config UCLIBC_SUSV4_LEGACY boolean {
  prompt "Enable SuSv4 LEGACY or obsolescent functions" if []
 }
 config UCLIBC_STRICT_HEADERS boolean {
  prompt "Hide structures and constants for unsupported features" if []
 }
 config UCLIBC_HAS_STUBS boolean {
  prompt "Provide stubs for unavailable functionality" if []
 }
 config UCLIBC_HAS_SHADOW boolean {
  prompt "Shadow Password Support" if []
  default [y] if []
 }
 config UCLIBC_HAS_PROGRAM_INVOCATION_NAME boolean {
  prompt "Support for program_invocation_name" if []
  config UCLIBC_HAS___PROGNAME boolean {
   prompt "Support for __progname" if [UCLIBC_HAS_PROGRAM_INVOCATION_NAME]
   default [y] if [UCLIBC_HAS_PROGRAM_INVOCATION_NAME]
   depends on [UCLIBC_HAS_PROGRAM_INVOCATION_NAME]
   inherited [UCLIBC_HAS_PROGRAM_INVOCATION_NAME]
  }
 }
 config UCLIBC_HAS_PTY boolean {
  prompt "Support for pseudo-terminals" if []
  default [y] if []
  config ASSUME_DEVPTS boolean {
   prompt "Assume that /dev/pts is a devpts or devfs file system" if [UCLIBC_HAS_PTY]
   default [y] if [UCLIBC_HAS_PTY]
   depends on [UCLIBC_HAS_PTY]
   inherited [UCLIBC_HAS_PTY]
  }
  config UNIX98PTY_ONLY boolean {
   prompt "Support only Unix 98 PTYs" if [UCLIBC_HAS_PTY]
   default [y] if [UCLIBC_HAS_PTY]
   depends on [UCLIBC_HAS_PTY]
   inherited [UCLIBC_HAS_PTY]
   if [UNIX98PTY_ONLY] {
    config UCLIBC_HAS_GETPT boolean {
     prompt "Support getpt() (glibc-compat)" if [UNIX98PTY_ONLY && UCLIBC_HAS_PTY]
     depends on [UCLIBC_HAS_PTY]
     default [y] if [!UNIX98PTY_ONLY]
     inherited [UNIX98PTY_ONLY && UCLIBC_HAS_PTY]
    }
   }
  }
 }
 if [!UNIX98PTY_ONLY] {
  config UCLIBC_HAS_GETPT boolean {
   prompt "Support getpt() (glibc-compat)" if [UNIX98PTY_ONLY && UCLIBC_HAS_PTY]
   depends on [UCLIBC_HAS_PTY]
   default [y] if [!UNIX98PTY_ONLY]
   inherited [!UNIX98PTY_ONLY]
  }
 }
 config UCLIBC_HAS_LIBUTIL boolean {
  prompt "Provide libutil library and functions" if [UCLIBC_HAS_PTY]
  depends on [UCLIBC_HAS_PTY]
  inherited [UCLIBC_HAS_PTY]
 }
 config UCLIBC_HAS_TM_EXTENSIONS boolean {
  prompt "Support 'struct tm' timezone extension fields" if []
  default [y] if []
 }
 config UCLIBC_HAS_TZ_CACHING boolean {
  prompt "Enable caching of the last valid timezone 'TZ' string" if []
  default [y] if []
 }
 config UCLIBC_HAS_TZ_FILE boolean {
  prompt "Enable '/etc/TZ' file support to set a default timezone (uClibc-specific)" if []
  default [y] if []
  config UCLIBC_HAS_TZ_FILE_READ_MANY boolean {
   prompt "Repeatedly read the '/etc/TZ' file" if [UCLIBC_HAS_TZ_FILE]
   depends on [UCLIBC_HAS_TZ_FILE]
   default [y] if [UCLIBC_HAS_TZ_FILE]
   inherited [UCLIBC_HAS_TZ_FILE]
  }
  config UCLIBC_TZ_FILE_PATH string {
   prompt "Path to the 'TZ' file for setting the global timezone" if [UCLIBC_HAS_TZ_FILE]
   depends on [UCLIBC_HAS_TZ_FILE]
   default ["/etc/TZ"] if [UCLIBC_HAS_TZ_FILE]
   inherited [UCLIBC_HAS_TZ_FILE]
  }
  config UCLIBC_FALLBACK_TO_ETC_LOCALTIME boolean {
   prompt "Use /etc/localtime as a fallback" if [UCLIBC_HAS_TZ_FILE]
   depends on [UCLIBC_HAS_TZ_FILE]
   default [y] if [UCLIBC_HAS_TZ_FILE]
   inherited [UCLIBC_HAS_TZ_FILE]
  }
 }
}
menu "Advanced Library Settings" {
 config UCLIBC_PWD_BUFFER_SIZE integer {
  prompt "Buffer size for getpwnam() and friends" if []
  default [256] if []
  range [12 1024] if []
 }
 config UCLIBC_GRP_BUFFER_SIZE integer {
  prompt "Buffer size for getgrnam() and friends" if []
  default [256] if []
  range [12 1024] if []
 }
 config UCLIBC_LINUX_MODULE_26 boolean {
  prompt "Linux kernel module functions (2.6)" if []
  default [y] if []
 }
 config UCLIBC_LINUX_MODULE_24 boolean {
  prompt "Linux kernel module functions (<2.6)" if [!TARGET_bfin && !TARGET_c6x]
  depends on [!TARGET_bfin && !TARGET_c6x]
  inherited [!TARGET_bfin && !TARGET_c6x]
 }
 config UCLIBC_LINUX_SPECIFIC boolean {
  prompt "Linux specific functions" if []
  default [y] if []
 }
 config UCLIBC_HAS_GNU_ERROR boolean {
  prompt "Support GNU extensions for error-reporting" if []
  default [y] if []
 }
 config UCLIBC_BSD_SPECIFIC boolean {
  prompt "BSD specific functions" if []
  default [y] if []
 }
 config UCLIBC_HAS_BSD_ERR boolean {
  prompt "BSD err functions" if []
  default [y] if []
 }
 config UCLIBC_HAS_OBSOLETE_BSD_SIGNAL boolean {
  prompt "BSD obsolete signal functions" if []
 }
 config UCLIBC_HAS_OBSOLETE_SYSV_SIGNAL boolean {
  prompt "SYSV obsolete signal functions" if []
 }
 config UCLIBC_NTP_LEGACY boolean {
  prompt "ntp_*() aliases" if []
 }
 config UCLIBC_SV4_DEPRECATED boolean {
  prompt "Enable SVr4 deprecated functions" if []
 }
 config UCLIBC_HAS_REALTIME boolean {
  prompt "Realtime-related family of SUSv functions" if []
  default [y] if []
  config UCLIBC_HAS_ADVANCED_REALTIME boolean {
   prompt "Advanced realtime-related family of SUSv functions" if [UCLIBC_HAS_REALTIME]
   default [y] if [UCLIBC_HAS_REALTIME]
   depends on [UCLIBC_HAS_REALTIME]
   inherited [UCLIBC_HAS_REALTIME]
  }
 }
 config UCLIBC_HAS_EPOLL boolean {
  prompt "epoll" if []
  default [y] if []
 }
 config UCLIBC_HAS_XATTR boolean {
  prompt "Extended Attributes" if []
  default [y] if []
 }
 config UCLIBC_HAS_PROFILING boolean {
  prompt "Profiling support" if []
  default [y] if []
 }
 config UCLIBC_HAS_CRYPT_IMPL boolean {
  prompt "libcrypt support" if []
  default [y] if []
  config UCLIBC_HAS_SHA256_CRYPT_IMPL boolean {
   prompt "libcrypt SHA256 support" if [UCLIBC_HAS_CRYPT_IMPL]
   depends on [UCLIBC_HAS_CRYPT_IMPL]
   inherited [UCLIBC_HAS_CRYPT_IMPL]
  }
  config UCLIBC_HAS_SHA512_CRYPT_IMPL boolean {
   prompt "libcrypt SHA512 support" if [UCLIBC_HAS_CRYPT_IMPL]
   depends on [UCLIBC_HAS_CRYPT_IMPL]
   inherited [UCLIBC_HAS_CRYPT_IMPL]
  }
  config UCLIBC_HAS_CRYPT_STUB boolean {
   prompt "libcrypt stubs" if [!UCLIBC_HAS_CRYPT_IMPL]
   default [y] if [!UCLIBC_HAS_CRYPT_IMPL]
   depends on [!UCLIBC_HAS_CRYPT_IMPL]
   inherited [!UCLIBC_HAS_CRYPT_IMPL]
  }
  config UCLIBC_HAS_CRYPT boolean {
   default [y] if [UCLIBC_HAS_CRYPT_IMPL || UCLIBC_HAS_CRYPT_STUB]
   depends on [UCLIBC_HAS_CRYPT_IMPL || UCLIBC_HAS_CRYPT_STUB]
   inherited [UCLIBC_HAS_CRYPT_IMPL || UCLIBC_HAS_CRYPT_STUB]
  }
 }
}
menuconfig UCLIBC_HAS_NETWORK_SUPPORT boolean {
 prompt "Networking Support" if []
 default [y] if []
 if [UCLIBC_HAS_NETWORK_SUPPORT] {
  config UCLIBC_HAS_SOCKET boolean {
   prompt "Socket support" if [UCLIBC_HAS_NETWORK_SUPPORT]
   default [y] if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_IPV4 boolean {
   prompt "IP version 4 support" if [UCLIBC_HAS_NETWORK_SUPPORT]
   default [y] if [UCLIBC_HAS_NETWORK_SUPPORT]
   select UCLIBC_HAS_SOCKET if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_IPV6 boolean {
   prompt "IP version 6 support" if [UCLIBC_HAS_NETWORK_SUPPORT]
   select UCLIBC_HAS_SOCKET if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
   config UCLIBC_HAS_RPC boolean {
    prompt "Remote Procedure Call (RPC) support" if [UCLIBC_HAS_NETWORK_SUPPORT && (UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6)]
    depends on [UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6]
    inherited [UCLIBC_HAS_NETWORK_SUPPORT && (UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6)]
    config UCLIBC_HAS_FULL_RPC boolean {
     prompt "Full RPC support" if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC]
     depends on [UCLIBC_HAS_RPC]
     default [y] if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC && !HAVE_SHARED]
     inherited [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC]
    }
    config UCLIBC_HAS_REENTRANT_RPC boolean {
     prompt "Reentrant RPC support" if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC]
     depends on [UCLIBC_HAS_RPC]
     default [y] if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC && !HAVE_SHARED]
     inherited [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_RPC]
    }
   }
  }
  config UCLIBC_USE_NETLINK boolean {
   prompt "Use netlink to query interfaces" if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_SOCKET]
   depends on [UCLIBC_HAS_SOCKET]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_HAS_SOCKET]
   config UCLIBC_SUPPORT_AI_ADDRCONFIG boolean {
    prompt "Support the AI_ADDRCONFIG flag" if [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_USE_NETLINK]
    depends on [UCLIBC_USE_NETLINK]
    inherited [UCLIBC_HAS_NETWORK_SUPPORT && UCLIBC_USE_NETLINK]
   }
  }
  config UCLIBC_HAS_BSD_RES_CLOSE boolean {
   prompt "Support res_close() (bsd-compat)" if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_COMPAT_RES_STATE boolean {
   prompt "Use compatible but bloated _res" if [UCLIBC_HAS_NETWORK_SUPPORT]
   default [y] if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_EXTRA_COMPAT_RES_STATE boolean {
   prompt "Use extra compatible but extra bloated _res" if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_RESOLVER_SUPPORT boolean {
   prompt "DNS resolver functions" if [UCLIBC_HAS_NETWORK_SUPPORT && (UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6)]
   select UCLIBC_HAS_COMPAT_RES_STATE if [UCLIBC_HAS_NETWORK_SUPPORT && (UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6)]
   depends on [UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT && (UCLIBC_HAS_IPV4 || UCLIBC_HAS_IPV6)]
  }
  config UCLIBC_HAS_LIBRESOLV_STUB boolean {
   prompt "Provide libresolv stub" if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
  config UCLIBC_HAS_LIBNSL_STUB boolean {
   prompt "Provide libnsl stub" if [UCLIBC_HAS_NETWORK_SUPPORT]
   inherited [UCLIBC_HAS_NETWORK_SUPPORT]
  }
 }
}
menu "String and Stdio Support" {
 config UCLIBC_HAS_STRING_GENERIC_OPT boolean {
  prompt "Use faster (but larger) generic string functions" if []
  default [y] if []
 }
 config UCLIBC_HAS_STRING_ARCH_OPT boolean {
  prompt "Use arch-specific assembly string functions (where available)" if []
  default [y] if []
 }
 config UCLIBC_HAS_CTYPE_TABLES boolean {
  prompt "Use Table Versions Of 'ctype.h' Functions." if []
  default [y] if []
  config UCLIBC_HAS_CTYPE_SIGNED boolean {
   prompt "Support Signed Characters In 'ctype.h' Functions." if [UCLIBC_HAS_CTYPE_TABLES]
   depends on [UCLIBC_HAS_CTYPE_TABLES]
   default [y] if [UCLIBC_HAS_CTYPE_TABLES]
   inherited [UCLIBC_HAS_CTYPE_TABLES]
  }
  choice boolean {
   prompt "ctype argument checking" if [UCLIBC_HAS_CTYPE_TABLES]
   depends on [UCLIBC_HAS_CTYPE_TABLES]
   default [UCLIBC_HAS_CTYPE_UNSAFE] if [UCLIBC_HAS_CTYPE_TABLES]
   config UCLIBC_HAS_CTYPE_UNSAFE boolean {
    prompt "Do not check -- unsafe" if [<choice>]
    inherited [<choice>]
   }
   config UCLIBC_HAS_CTYPE_CHECKED boolean {
    prompt "Detect and handle appropriately" if [<choice>]
    inherited [<choice>]
   }
   config UCLIBC_HAS_CTYPE_ENFORCED boolean {
    prompt "Issue a diagnostic and abort()" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 config UCLIBC_HAS_WCHAR boolean {
  prompt "Wide Character Support" if []
 }
 config UCLIBC_HAS_LOCALE boolean {
  prompt "Locale Support" if []
  select UCLIBC_HAS_WCHAR if []
  select UCLIBC_HAS_CTYPE_TABLES if []
  choice boolean {
   prompt "Locale data" if [UCLIBC_HAS_LOCALE]
   depends on [UCLIBC_HAS_LOCALE]
   default [UCLIBC_BUILD_ALL_LOCALE] if [UCLIBC_HAS_LOCALE]
   config UCLIBC_BUILD_ALL_LOCALE boolean {
    prompt "All locales" if [<choice> && UCLIBC_HAS_LOCALE]
    depends on [UCLIBC_HAS_LOCALE]
    inherited [<choice> && UCLIBC_HAS_LOCALE]
   }
   config UCLIBC_BUILD_MINIMAL_LOCALE boolean {
    prompt "Only selected locales" if [<choice> && UCLIBC_HAS_LOCALE]
    depends on [UCLIBC_HAS_LOCALE]
    inherited [<choice> && UCLIBC_HAS_LOCALE]
   }
   config UCLIBC_PREGENERATED_LOCALE_DATA boolean {
    prompt "Use Pre-generated Locale Data" if [<choice> && UCLIBC_HAS_LOCALE]
    depends on [UCLIBC_HAS_LOCALE]
    inherited [<choice> && UCLIBC_HAS_LOCALE]
   }
  }
 }
 config UCLIBC_BUILD_MINIMAL_LOCALES string {
  prompt "locales to use" if [UCLIBC_BUILD_MINIMAL_LOCALE]
  depends on [UCLIBC_BUILD_MINIMAL_LOCALE]
  default ["en_US"] if [UCLIBC_BUILD_MINIMAL_LOCALE]
  inherited [UCLIBC_BUILD_MINIMAL_LOCALE]
 }
 config UCLIBC_DOWNLOAD_PREGENERATED_LOCALE_DATA boolean {
  prompt "Automagically Download the Pre-generated Locale Data (if necessary)" if [UCLIBC_PREGENERATED_LOCALE_DATA]
  depends on [UCLIBC_PREGENERATED_LOCALE_DATA]
  inherited [UCLIBC_PREGENERATED_LOCALE_DATA]
 }
 config UCLIBC_HAS_XLOCALE boolean {
  prompt "Extended Locale Support (experimental/incomplete)" if [UCLIBC_HAS_LOCALE]
  depends on [UCLIBC_HAS_LOCALE]
  inherited [UCLIBC_HAS_LOCALE]
 }
 config UCLIBC_HAS_HEXADECIMAL_FLOATS boolean {
  prompt "Support hexadecimal float notation" if [UCLIBC_HAS_CTYPE_TABLES && UCLIBC_HAS_FLOATS]
  depends on [UCLIBC_HAS_CTYPE_TABLES]
  depends on [UCLIBC_HAS_FLOATS]
  inherited [UCLIBC_HAS_CTYPE_TABLES && UCLIBC_HAS_FLOATS]
 }
 config UCLIBC_HAS_GLIBC_DIGIT_GROUPING boolean {
  prompt "Support glibc's \"'\" flag for allowing locale-specific digit grouping" if [UCLIBC_HAS_LOCALE && UCLIBC_HAS_FLOATS]
  depends on [UCLIBC_HAS_LOCALE]
  depends on [UCLIBC_HAS_FLOATS]
  inherited [UCLIBC_HAS_LOCALE && UCLIBC_HAS_FLOATS]
  config UCLIBC_HAS_SCANF_LENIENT_DIGIT_GROUPING boolean {
   prompt "Do not require digit grouping when the \"'\" flag is specified" if [UCLIBC_HAS_GLIBC_DIGIT_GROUPING]
   depends on [UCLIBC_HAS_GLIBC_DIGIT_GROUPING]
   default [y] if [UCLIBC_HAS_GLIBC_DIGIT_GROUPING]
   inherited [UCLIBC_HAS_GLIBC_DIGIT_GROUPING]
  }
 }
 config UCLIBC_HAS_GLIBC_CUSTOM_PRINTF boolean {
  prompt "Support glibc's register_printf_function() (glibc-compat)" if [!USE_OLD_VFPRINTF]
  depends on [!USE_OLD_VFPRINTF]
  inherited [!USE_OLD_VFPRINTF]
 }
 config USE_OLD_VFPRINTF boolean {
  prompt "Use the old vfprintf implementation" if [!UCLIBC_HAS_WCHAR]
  depends on [!UCLIBC_HAS_WCHAR]
  inherited [!UCLIBC_HAS_WCHAR]
 }
 config UCLIBC_PRINTF_SCANF_POSITIONAL_ARGS integer {
  prompt "Maximum number of positional args.  Either 0 or >= 9." if [!USE_OLD_VFPRINTF]
  depends on [!USE_OLD_VFPRINTF]
  default [9] if [!USE_OLD_VFPRINTF]
  inherited [!USE_OLD_VFPRINTF]
 }
 config UCLIBC_HAS_SCANF_GLIBC_A_FLAG boolean {
  prompt "Support glibc's 'a' flag for scanf string conversions (not implemented)" if []
 }
 choice boolean {
  prompt "Stdio buffer size" if []
  default [UCLIBC_HAS_STDIO_BUFSIZ_4096] if []
  config UCLIBC_HAS_STDIO_BUFSIZ_NONE boolean {
   prompt "none (WARNING - BUFSIZ will be 256 in stdio.h)" if [<choice> && !UCLIBC_HAS_WCHAR]
   depends on [!UCLIBC_HAS_WCHAR]
   inherited [<choice> && !UCLIBC_HAS_WCHAR]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_256 boolean {
   prompt "256 (minimum ANSI/ISO C99 value)" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_512 boolean {
   prompt "512" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_1024 boolean {
   prompt "1024" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_2048 boolean {
   prompt "2048" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_4096 boolean {
   prompt "4096" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUFSIZ_8192 boolean {
   prompt "8192" if [<choice>]
   inherited [<choice>]
  }
 }
 choice boolean {
  prompt "Stdio builtin buffer size (uClibc-specific)" if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  depends on [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  default [UCLIBC_HAS_STDIO_BUILTIN_BUFFER_NONE] if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_NONE boolean {
   prompt "None" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_4 boolean {
   prompt "4" if [<choice>]
   inherited [<choice>]
  }
  config UCLIBC_HAS_STDIO_BUILTIN_BUFFER_8 boolean {
   prompt "8" if [<choice>]
   inherited [<choice>]
  }
 }
 config UCLIBC_HAS_STDIO_SHUTDOWN_ON_ABORT boolean {
  prompt "Attempt to shutdown stdio subsystem when abort() is called." if []
 }
 config UCLIBC_HAS_STDIO_GETC_MACRO boolean {
  prompt "Provide a macro version of getc()" if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  depends on [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  default [y] if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  inherited [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
 }
 config UCLIBC_HAS_STDIO_PUTC_MACRO boolean {
  prompt "Provide a macro version of putc()" if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  depends on [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  default [y] if [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
  inherited [!UCLIBC_HAS_STDIO_BUFSIZ_NONE]
 }
 config UCLIBC_HAS_STDIO_AUTO_RW_TRANSITION boolean {
  prompt "Support auto-r/w transition" if []
  default [y] if []
 }
 config UCLIBC_HAS_FOPEN_LARGEFILE_MODE boolean {
  prompt "Support an fopen() 'F' flag for large file mode (uClibc-specific)" if [UCLIBC_HAS_LFS]
  depends on [UCLIBC_HAS_LFS]
  inherited [UCLIBC_HAS_LFS]
 }
 config UCLIBC_HAS_FOPEN_EXCLUSIVE_MODE boolean {
  prompt "Support an fopen() 'x' flag for exclusive mode (glibc-compat)" if []
 }
 config UCLIBC_HAS_FOPEN_CLOSEEXEC_MODE boolean {
  prompt "Support an fopen() 'e' flag for close-on-exec mode (glibc-compat)" if []
 }
 config UCLIBC_HAS_GLIBC_CUSTOM_STREAMS boolean {
  prompt "Support fmemopen(), open_memstream(), and fopencookie() (glibc-compat)" if []
 }
 config UCLIBC_HAS_PRINTF_M_SPEC boolean {
  prompt "Support the '%m' specifier in printf format strings (glibc-compat)" if []
 }
 config UCLIBC_HAS_ERRNO_MESSAGES boolean {
  prompt "Include the errno message text in the library" if []
  default [y] if []
  config UCLIBC_HAS_SYS_ERRLIST boolean {
   prompt "Support sys_errlist[] (obsolete-compat)" if [UCLIBC_HAS_ERRNO_MESSAGES]
   depends on [UCLIBC_HAS_ERRNO_MESSAGES]
   inherited [UCLIBC_HAS_ERRNO_MESSAGES]
  }
 }
 config UCLIBC_HAS_SIGNUM_MESSAGES boolean {
  prompt "Include the signum message text in the library" if []
  default [y] if []
  config UCLIBC_HAS_SYS_SIGLIST boolean {
   prompt "Support sys_siglist[] (bsd-compat)" if [UCLIBC_HAS_SIGNUM_MESSAGES]
   depends on [UCLIBC_HAS_SIGNUM_MESSAGES]
   inherited [UCLIBC_HAS_SIGNUM_MESSAGES]
  }
 }
 config UCLIBC_HAS_GETTEXT_AWARENESS boolean {
  prompt "Include gettext awareness" if [UCLIBC_HAS_LOCALE && UCLIBC_MJN3_ONLY]
  depends on [UCLIBC_HAS_LOCALE && UCLIBC_MJN3_ONLY]
  inherited [UCLIBC_HAS_LOCALE && UCLIBC_MJN3_ONLY]
 }
 config UCLIBC_HAS_GNU_GETOPT boolean {
  prompt "Support gnu getopt" if []
  default [y] if []
 }
 config UCLIBC_HAS_STDIO_FUTEXES boolean {
  prompt "Use futexes for multithreaded I/O locking" if [UCLIBC_HAS_THREADS_NATIVE]
  depends on [UCLIBC_HAS_THREADS_NATIVE]
  inherited [UCLIBC_HAS_THREADS_NATIVE]
 }
 config UCLIBC_HAS_GETOPT_LONG boolean {
  prompt "Support getopt_long/getopt_long_only" if [!UCLIBC_HAS_GNU_GETOPT]
  depends on [!UCLIBC_HAS_GNU_GETOPT]
  default [y] if [!UCLIBC_HAS_GNU_GETOPT]
  inherited [!UCLIBC_HAS_GNU_GETOPT]
 }
 config UCLIBC_HAS_GNU_GETSUBOPT boolean {
  prompt "Support glibc getsubopt" if []
  default [y] if []
 }
}
menu "Big and Tall" {
 config UCLIBC_HAS_REGEX boolean {
  prompt "Regular Expression Support" if []
  default [y] if []
  config UCLIBC_HAS_REGEX_OLD boolean {
   prompt "Use the older (stable) regular expression code" if [UCLIBC_HAS_REGEX]
   depends on [UCLIBC_HAS_REGEX]
   default [y] if [UCLIBC_HAS_REGEX]
   inherited [UCLIBC_HAS_REGEX]
  }
 }
 config UCLIBC_HAS_FNMATCH boolean {
  prompt "fnmatch Support" if []
  default [y] if []
  config UCLIBC_HAS_FNMATCH_OLD boolean {
   prompt "Use the older (stable) fnmatch code" if [UCLIBC_HAS_FNMATCH]
   depends on [UCLIBC_HAS_FNMATCH]
   default [y] if [UCLIBC_HAS_FNMATCH]
   inherited [UCLIBC_HAS_FNMATCH]
  }
 }
 config UCLIBC_HAS_WORDEXP boolean {
  prompt "Support the wordexp() interface" if [UCLIBC_HAS_GLOB]
  depends on [UCLIBC_HAS_GLOB]
  inherited [UCLIBC_HAS_GLOB]
 }
 config UCLIBC_HAS_NFTW boolean {
  prompt "Support the nftw() interface" if []
 }
 config UCLIBC_HAS_FTW boolean {
  prompt "Support the ftw() interface (SUSv4-obsolete)" if [UCLIBC_SUSV4_LEGACY]
  depends on [UCLIBC_SUSV4_LEGACY]
  inherited [UCLIBC_SUSV4_LEGACY]
 }
 config UCLIBC_HAS_FTS boolean {
  prompt "Support the fts() interface (bsd-compat)" if []
 }
 config UCLIBC_HAS_GLOB boolean {
  prompt "Support the glob() interface" if [UCLIBC_HAS_FNMATCH]
  depends on [UCLIBC_HAS_FNMATCH]
  default [y] if [UCLIBC_HAS_FNMATCH]
  inherited [UCLIBC_HAS_FNMATCH]
  config UCLIBC_HAS_GNU_GLOB boolean {
   prompt "Support gnu glob() interface" if [UCLIBC_HAS_GLOB]
   depends on [UCLIBC_HAS_GLOB]
   inherited [UCLIBC_HAS_GLOB]
  }
 }
 config UCLIBC_HAS_UTMPX boolean {
  prompt "utmpx based support for tracking login/logouts to/from the system" if []
 }
}
menu "Library Installation Options" {
 config RUNTIME_PREFIX string {
  prompt "uClibc runtime library directory" if []
  default ["/usr/$(TARGET_ARCH)-linux-uclibc/"] if []
 }
 config DEVEL_PREFIX string {
  prompt "uClibc development environment directory" if []
  default ["/usr/$(TARGET_ARCH)-linux-uclibc/usr/"] if []
 }
 config MULTILIB_DIR string {
  prompt "library path component" if []
  default ["lib"] if []
 }
 config HARDWIRED_ABSPATH boolean {
  prompt "Hardwire absolute paths into linker scripts" if []
  default [y] if []
 }
}
menu "Security options" {
 config UCLIBC_BUILD_PIE boolean {
  prompt "Build utilities as ET_DYN/PIE executables" if [HAVE_SHARED && (TARGET_arm || TARGET_frv || TARGET_i386 || TARGET_mips || TARGET_powerpc)]
  depends on [HAVE_SHARED]
  depends on [TARGET_arm || TARGET_frv || TARGET_i386 || TARGET_mips || TARGET_powerpc]
  select FORCE_SHAREABLE_TEXT_SEGMENTS if [HAVE_SHARED && (TARGET_arm || TARGET_frv || TARGET_i386 || TARGET_mips || TARGET_powerpc)]
  inherited [HAVE_SHARED && (TARGET_arm || TARGET_frv || TARGET_i386 || TARGET_mips || TARGET_powerpc)]
 }
 config UCLIBC_HAS_ARC4RANDOM boolean {
  prompt "Include the arc4random() function" if []
 }
 config HAVE_NO_SSP boolean {
 }
 config UCLIBC_HAS_SSP boolean {
  prompt "Support for GCC stack smashing protector" if [!HAVE_NO_SSP]
  depends on [!HAVE_NO_SSP]
  inherited [!HAVE_NO_SSP]
  config UCLIBC_HAS_SSP_COMPAT boolean {
   prompt "Support for gcc-3.x propolice smashing stack protector" if [UCLIBC_HAS_SSP]
   depends on [UCLIBC_HAS_SSP]
   inherited [UCLIBC_HAS_SSP]
  }
  config SSP_QUICK_CANARY boolean {
   prompt "Use simple guard values without accessing /dev/urandom" if [UCLIBC_HAS_SSP]
   depends on [UCLIBC_HAS_SSP]
   inherited [UCLIBC_HAS_SSP]
  }
  choice boolean {
   prompt "Propolice protection blocking signal" if [UCLIBC_HAS_SSP]
   depends on [UCLIBC_HAS_SSP]
   default [PROPOLICE_BLOCK_ABRT] if [UCLIBC_HAS_SSP && !DODEBUG]
   default [PROPOLICE_BLOCK_SEGV] if [UCLIBC_HAS_SSP && DODEBUG]
   config PROPOLICE_BLOCK_ABRT boolean {
    prompt "abort" if [<choice>]
    inherited [<choice>]
   }
   config PROPOLICE_BLOCK_SEGV boolean {
    prompt "segfault" if [<choice>]
    inherited [<choice>]
   }
  }
  config UCLIBC_BUILD_SSP boolean {
   prompt "Build uClibc with -fstack-protector" if [UCLIBC_HAS_SSP]
   depends on [UCLIBC_HAS_SSP]
   inherited [UCLIBC_HAS_SSP]
  }
 }
 config UCLIBC_BUILD_RELRO boolean {
  prompt "Build uClibc with linker option -z RELRO" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  default [y] if [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 config UCLIBC_BUILD_NOW boolean {
  prompt "Build uClibc with linker option -z NOW" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 config UCLIBC_BUILD_NOEXECSTACK boolean {
  prompt "Build uClibc with noexecstack marking" if []
  default [y] if []
 }
}
menu "Development/debugging options" {
 config CROSS_COMPILER_PREFIX string {
  prompt "Cross-compiling toolchain prefix" if []
  default [""] if []
 }
 config UCLIBC_EXTRA_CFLAGS string {
  prompt "Extra CFLAGS" if []
  default [""] if []
 }
 config DODEBUG boolean {
  prompt "Enable debugging symbols" if []
  select EXTRA_WARNINGS if []
 }
 config DODEBUG_PT boolean {
  prompt "Build pthread with debugging output" if [UCLIBC_HAS_THREADS && LINUXTHREADS_OLD]
  depends on [UCLIBC_HAS_THREADS && LINUXTHREADS_OLD]
  inherited [UCLIBC_HAS_THREADS && LINUXTHREADS_OLD]
 }
 config DOSTRIP boolean {
  prompt "Strip libraries and executables" if [!DODEBUG]
  default [y] if [!DODEBUG]
  depends on [!DODEBUG]
  inherited [!DODEBUG]
 }
 config DOASSERTS boolean {
  prompt "Build with run-time assertion testing" if []
 }
 config SUPPORT_LD_DEBUG boolean {
  prompt "Build the shared library loader with debugging support" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 config SUPPORT_LD_DEBUG_EARLY boolean {
  prompt "Build the shared library loader with early debugging support" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 config UCLIBC_MALLOC_DEBUGGING boolean {
  prompt "Build malloc with debugging support" if [MALLOC || MALLOC_STANDARD]
  depends on [MALLOC || MALLOC_STANDARD]
  inherited [MALLOC || MALLOC_STANDARD]
 }
 config UCLIBC_HAS_BACKTRACE boolean {
  prompt "Add support for application self-debugging" if [HAVE_SHARED]
  depends on [HAVE_SHARED]
  inherited [HAVE_SHARED]
 }
 config WARNINGS string {
  prompt "Compiler Warnings" if []
  default ["-Wall"] if []
 }
 config EXTRA_WARNINGS boolean {
  prompt "Enable extra annoying warnings" if []
 }
 config DOMULTI boolean {
  prompt "Compile all sources at once into an object" if []
 }
 config UCLIBC_MJN3_ONLY boolean {
  prompt "Manuel's hidden warnings" if []
 }
}
